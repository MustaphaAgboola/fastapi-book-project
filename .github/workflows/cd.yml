name: CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install NGINX if not already installed
            if ! command -v nginx &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y nginx
            fi
            
            # Install Certbot and NGINX plugin if not already installed
            if ! command -v certbot &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y certbot python3-certbot-nginx
            fi
            
            # Create NGINX configuration
            sudo tee /etc/nginx/sites-available/fastapi << EOL
            server {
                listen 80;
                listen [::]:80;
                server_name ${{ secrets.DOMAIN_NAME }};
                
                # Redirect all HTTP traffic to HTTPS
                return 301 https://\$host\$request_uri;
            }

            server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name ${{ secrets.DOMAIN_NAME }};

                # SSL parameters
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
                ssl_session_timeout 1d;
                ssl_session_cache shared:SSL:50m;
                ssl_session_tickets off;
                ssl_stapling on;
                ssl_stapling_verify on;
                
                # Security headers
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                add_header X-Frame-Options SAMEORIGIN;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";

                location / {
                    proxy_pass http://localhost:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL
            
            # Enable the site
            sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
            
            # Remove default nginx site
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Obtain SSL certificate
            sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos -m ${{ secrets.SSL_EMAIL }} --redirect
            
            # Test NGINX configuration
            sudo nginx -t
            
            # Reload NGINX to apply changes
            sudo systemctl reload nginx
            
            # Pull the latest image
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest
            
            # Stop and remove existing container
            sudo docker stop fastapi-app || true
            sudo docker rm fastapi-app || true
            
            # Run new container
            sudo docker run -d \
              --name fastapi-app \
              --restart unless-stopped \
              -p 8000:8000 \
              ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest
            
            # Set up automatic renewal for SSL certificate
            (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -